# copy this to places where you have linked BOSS_handle_SR and modify to taste.
# format is JSON with comments
{

# To enable debug dumps for *every* participant, uncomment this
# "debug_dump" : "TRUE",

# Name of this process in logs and reports
"pname": "BOSS",

# URL to top page of OBS, used to construct other urls
"obsurl": "https://build.pub.meego.com/",

# list of addresses to receive Cc of notification mails
"emails": [],
# list of addresses to receive error notification mails
"admin_emails": [],

# count of changelog entries that are relevant for a new package
#"new_changelog_count": "1",

# The repository in this target project that we care about
"repository": "standard",

# Architectures that are considered for build-success comparison
"archs": ["i586"],

# Exclude these target repositories from prechecks, build trial and image builds
# [only implemented for build trial]
"exclude_repos" : [],

# Exclude these target repositories from prechecks, build trial and image builds
# [only implemented for build trial]
"exclude_archs" : [],

"irc": {
  "log_channel" : "",
  "req_channel" : "",
  "highlight" : ""
  },

# Type of image used for testing
"image": {
  "image_type": "livecd",
  "arch": "i586",
  "name": "core-ia32-generic",
  "ksfile": "core-ia32-generic.ks"
  },

# QA Testing related stuff
"qa": {
  "selected_test_packages": {},
  "stage": "testing",
  "hwproduct": "VM",
  "testtype": "Requests",
  "target": "Mer",
  "release_version": "release"
  },

# Set this to skip OTS image tests (yes it's badly named)
"debug": "TRUE",

# username, group or project to ask for review, resolved in that order.
# OBS groups can be created by the Admin user.
# Note that by default the target project is used as the
# reviewer, which means all its maintainers will get notified and will be
# able to handle the review
#"reviewer" : "Admin",

# Uncomment this in case the process will handle new packages
# that have old malformed changelog. Set the value to the number
# of changelog entries that will be fetched by get_relevant_changelog
#"new_changelog_count": 1

# Run these precheck participants
"prechecks": [
# guard against sneaky SRs that want to promote to multiple projects
     "check_multiple_destinations",
# package needs to introduce some changes
     "check_no_changes",
# Allow some packages to skip some prechecks using a boss.conf file
     "get_package_boss_conf",
# this sets the targetrepo field needed later
     "check_has_valid_repo",
# package needs to have built successfuly
     "check_package_built_at_source",
# check package contents are complete
     "check_package_is_complete",
# this retrieves relevant changelog entries for each package being promoted
     "get_relevant_changelog",
# make sure each package has new changelog entries
     "check_has_relevant_changelog",
# validate changes file
     "check_valid_changes",
# make sure a bug is referenced in the changelog entries
#    "check_mentions_bug",
# validate spec file
#    "check_spec",
# validate yaml/spec
     "check_yaml_matches_spec",
# verify that mentioned bugs are in RESOLVED/FIXED state
     "bugzilla",
# This is just here because JSON cares deeply about commas
     ""
],

# Names of email templates to use
"template": {
    "accept": "accept-notice",
    "reject": "reject-notice",
    "review": "review-notice",
    "error" : "error-notice"
},

"build_trial": {
# A project name that provides packages that could be required for the trial
# build in addition to the promotion target project.
#   "extra_path" : ""
# Remove the trial area when the request gets accepted
    "remove_on_success" : "true",
# Remove the trial area when the request gets rejected
    "remove_on_fail" : "false",
# How long to wait before removing the failed trial area
    "keep_failed_for" : "1d"
},

# Perform these processing tasks
"stages": [
# Mark the SR as in progress by adding a review
  "auto_review",
# Do the prechecks defined in the above list
  "prechecks",
# Update status and comment on bugs in bugzilla
# check also reports.bz_resolution configuration below
  "bugzilla",
# ask a human for review at checkpoint A : after prechecks
  "review_before_lock",
# Controls if trial build is performed.
  "trial_build",
# build an image after trial build
  "build_image",
# test the image with OTS (only effective after build_image)
  "test_image",
# ask a human for review at checkpoint B : after trial build, image build, QA testing
# but before unlocking the target project, effectively blocking other requests until
# this review is handled
# "review_in_lock",
# ask a human for review at checkpoint C : after trial build, image build, QA testing
# and after unlocking the target project, allowing other requests to proceed even if
# this review is not handled
# "review_after_lock",
# accept request if nothing failed
  "accept",
# reject request if something failed
  "reject",
# controls the whole reporting subprocess which includes revs, email, bz etc ..
  "report",
# send package and image data to REVS after accepting
  "revs",
# upload testing results to a qareports instance 
#  "qa-reports",
# compare the test run with previous results in qareports
# "qa-vote",
# This is just here because JSON cares deeply about commas
  ""
],

"reports":{
  "bz_resolution": "FIXED"
}

}
