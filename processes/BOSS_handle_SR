# This process is part of the MINT standard process
#
# It should be linked to SRCSRV_REQUEST_CREATE in projects where BOSS should
# handle SRs.
# Also copy BOSS_handle_SR.conf to SRCSRV_REQUEST_CREATE.conf in those
# projects, and modify it as needed.
#
#
# A request to the target project starts a process which handles the request.
# The request has a list of packages, a source and a target.

Ruote.process_definition 'BOSS_handle_SR' do
  sequence do

# The SR should be aimed at the ultimate target project.
# A trial build  and :Testing is appended to its name for the project to
# test in.  This should not need changing.
    # FIXME : this should include the SR# somehow
    # set 'trial_project' => '${project}:Testing:${rid}'
    set 'trial_project' => '${project}:Testing'
    set 'final_project' => '${project}'
    set 'targetrepo' => '${repository}'


    ################################################################
    # Debugging

    # To enable debug dumps for *every* participant, uncomment this
    #set 'debug_dump' => 'TRUE'

    # Alternatively you may set the following parameter on individual
    # participants:
    #   :debug_dump => 'TRUE'
    # To enable BOSS process tracing:
    #set 'boss_trace' => 'TRUE'

    # set some initial values that are specific to the process
    # the initial status is set to SUCCESS and if it changes at any time
    # it is considered a failure.
    set 'status' => 'SUCCESS'
    set 'ver' => '0.1'

################################################################
# Start the process

    # First the request is labelled 'in review' (ie it needs some OBS
    # work to complete) Then the process looks at all packages and
    # runs checks on each

    # TODO
    #report_event :msg => 'Starting automated review'
    #change_request_state :action => 'review', :txt => "Being reviewed by BOSS"

    report_event :msg => 'Running checks'

    # Many checks require relevant changelog information in the WI
    get_relevant_changelog

    iterator :on_field => 'prechecks', :to => 'v:check' do
      sequence do
        echo 'running ${v:check}'
        given '${v:check}' do
          of 'check_valid_changes' do
            check_valid_changes :using => 'relevant_changelog'
          end
          # if no special cases match...
          participant '${v:check}'
        end
        _if :test => '${__result__} != true' do set 'status' => 'FAIL' end
      end
    end

    _if :test => '${status} != SUCCESS' do
      sequence do
        do_reject
        # It is safe to terminate here as we're not holding a lock
	report_event :msg => 'Process finished'
        terminate
      end
    end

    # The next step is to simulate acceptance by doing a build of the
    # requested packages in the Testing project. We wait for a lock,
    # the request is then built and the process waits until a 'built'
    # action is run (elsewhere).  Once built, a subprocess is called
    # to run the QA/OTS checks and the request is then either accepted
    # or another subprocess is called to clean up the Testing area.

    with_OBS_ticket do
      sequence do
        report_event :msg => 'Start trial build : ${trial_project}'
        # Now create and monitor a per-SR trial_project
        #prepare_trial_build :build_in => '${trial_project}'
        do_build_trial :build_in => '${trial_project}', :linked => 'True'

        # This now waits for a build to finish
        report_event :msg => 'Wait for trial build : ${trial_project}'
        repeat :timeout => '30m', :on_timeout => 'error' do
          report_event :msg => 'Is repo published?'
          is_repo_published :project => '${trial_project}'
          _break :if => '${f:__result__}'
          wait '30s'
        end
        report_event :msg => 'Build done : ${trial_project}'
        get_build_trial_results :build_in => '${trial_project}'

        _if :test => '${f:__result__} == false' do
          sequence do
            report_event :msg => 'Failures : ${new_failures}'
            do_reject
          end
        # _else
          sequence do
	    report_event :msg => 'Trial build succeeded : building an image'
            do_check_image
            _if :test => '${f:status} != SUCCESS' do
              do_reject
              do_accept_and_update
            end
          end
        end
        # Do this after the image is built (and maybe not at all if it fails when
        # we're doing per-SR projects)
        do_revert_trial :build_in => '${trial_project}', :linked => 'True'
      end
    end
    report_event :msg => 'Process finished'
  end

  ################################################################
  # This is the QA subprocess; the final step that determines if the
  # request is accepted' It creates a kickstart file, calls IMG and
  # then submits the image to OTS. If all is well then the process to
  # update the information system runs.

  define 'do_check_image' do
    report_event :msg => 'Check image'
    cursor :break_if => '${status} != SUCCESS or ${__result__} != true' do
      # FIXME : define image?
      # defineimage :image_type => 'testing'
      report_event :msg => 'Prepare a ks'
#      build_ks :packages_event => 'true'
      build_ks
      request_image
      report_event :msg => 'Build image'
      build_image :debug_dump => 'true'
      # Disable test_image until OTS is operational
      report_event :msg => 'Would now test but OTS disabled'
      #test_image
    end
    # Ugly hack. Errors return __result__ == false but don't set status==FAILED
    # This will be resolved when we handle __error__ better
    _if :test => '${__result__} != true' do
      set 'f:status' => 'FAILED'
    end
    report_event :msg => 'Check image done'
  end

  ################################################################
  # Any error causes the request to be rejected and the submitter
  # notified

  define 'do_reject' do
    sequence do
      report_event :msg => 'Rejecting'
      change_request_state :action => 'reject'
      set 'status' => 'FAILED'
      get_notify_recipients_obs :role => 'submitter'
      notify :template => 'submit_request', :subject => '[BOSS] Rejected promotion request #${ev.id}', :extra_msg => '${build_msg}'
    end
  end

  ################################################################
  # As packages move into Trunk, their bug & feature status need
  # updating and the reporting system is notified of progress.  The
  # final update steps are to accept the request and notify the user

  define 'do_accept_and_update' do
    sequence do
      report_event :msg => 'Prechecks, build and image build succeeded: Suggest accepting'
      # FIXME: should the process verify with a human before approving (need a UI)
      # change_request_state :action => 'seek_approval'
      change_request_state :action => 'accept', :debug_dump => 'TRUE'

      # Now for each package promoted, 
      iterator :on_field => 'ev.actions', :to_field => 'action' do
        sequence do
          set 'f:package' => '${action.sourcepackage}'
          #report_event :msg => 'Doing updates for ${package} after success'
          #getchangelog
          #bz
          #revs_update
          echo 'feed revs'
          feed_revs
        end
      end
      # Allow REVS to process the image
      revs_image
      get_notify_recipients_obs :role => 'submitter'
      get_notify_recipients_obs :role => 'target project maintainers', :cc => 't'
      notify :template => 'submit_request', :subject => '[BOSS] Accepted promotion request #${ev.id}', :extra_msg => '${build_msg}'
    end
  end

  ################################################################
  # This utility subprocess wraps a group of actions inside other
  # process steps; in this case reserving the use of a build project

  define 'with_OBS_ticket' do
    sequence do
      report_event :msg => 'Waiting for trial area to be free'
      obsticket :action => 'get', :lock_project => '${trial_project}'
      report_event :msg => 'Got trial area (locked)'
      apply
      report_event :msg => 'Unlocking trial area'
      obsticket :action => 'release', :lock_project => '${trial_project}'
    end
  end

  define 'report_event' do
    sequence do
      echo 'SR#{ev.id} ${v:msg}'
      notify_irc :if => '${irc_channel} is set', :msg => 'SR#{ev.id} ${v:msg}', :irc_channel => '${irc_channel}'
    end
  end

end
