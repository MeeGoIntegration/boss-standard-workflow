# This process is part of the MINT standard process
#
# It should be linked to projects where BOSS should handle SRs.
# Also copy SRCSRV_REQUEST_CREATE.BOSS_handle_SR.conf to those
# projects, and modify it as needed.

# A request to the target project starts a process which handles the request.
# The request has a list of packages, a source and a target.

Ruote.process_definition 'BOSS_handle_SR' do
  sequence do

    ################################################################
    # Debugging

    # you may set the following parameter on individual participants
    #   :debug_dump => 'TRUE'

    # set some initial values that are specific to the process
    # the initial status is set to SUCCESS and if it changes at any time
    # it is considered a failure.
    set 'status' => 'SUCCESS'
    set 'ver' => '0.1'

    # Simplify some conditionals later on
    set 'build_trial.create' => '', :if => '"${build_trial.create}" == "false"'
    set 'build_trial.remove_on_fail' => '', :if => '"${build_trial.remove_on_fail}" == "false"'
    set 'build_trial.remove_on_success' => '', :if => '"${build_trial.remove_on_success}" == "false"'

    report_event :msg => 'Process started'

    # Prechecks don't need to be serialized so they are done outside the lock
    do_prechecks :if => 'prechecks in ${stages}'

    # Checkpoint A: ask for human review if configured to do so before getting a
    # lock and doing expensive tests
    do_review_before_lock :if => 'review_before_lock in ${stages}'

    # The following block is serialized by a lock around the target project
    with_OBS_ticket do
      sequence do

        cursor :break_if => '${f:status} != SUCCESS' do
          # Build the new packages and their reverse deps in a clean area
          do_build_trial_subprocess :if => 'trial_build in ${stages}'
          # build a device image
          do_build_image :if => 'build_image in ${stages}'
          # test the device image
          _if :test => 'build_image in ${stages}' do
            do_test_image :if => 'test_image in ${stages}'
          end

          #do_review_after_lock :if => 'review_after_lock in ${stages}'

        end

        _if '${f:status} != SUCCESS' do
          do_reject
          # _else
          do_accept
        end

        # if we have a static build area then clean it before unlocking
        _if :test => 'trial_build in ${stages}' do
          do_revert_trial_subprocess :if => '"${f:build_trial.create}" == ""'
        end

      end
    end

    # if we have a dynamic build area then clean it after unlocking
    _if :test => 'trial_build in ${stages}' do
      do_revert_trial_subprocess :if => '"${f:build_trial.create}" != ""'
    end

    report_event :msg => 'Process finished'

  end

  define 'do_notify_review' do
    sequence do
      
      get_request :req_id => "${ev.id}", :field => "req"
      get_userdata :user => "${req.state.who}", :field => "author"
      get_notify_recipients_obs :user => '${reviewer}'
      notify :template => '${template.review}', :mail_to => "$f:emails",
             :subject => '[${pname}] SR#${req.id} waiting for review'

      notify_irc :if => '"${irc.req_channel}" != ""',
                 :irc_channel => '${irc.req_channel}',
                 :msg => '${irc.highlight} SR#${ev.id} waiting for review at ${obsurl}/request/show/${ev.id}'

      report_event :msg => '${obsurl}/request/show/${ev.id} : ' +
                           'needs review using : osc review accept/decline ${ev.id} -m"MESSAGE"'

    end
  end

  define 'do_review_before_lock' do
    sequence do

      change_request_state :action => 'add review',
                           :reviewer => '${reviewer}',
                           :comment => "Please replace this text with a review"+
                                       " and approve/reject the review (not"+
                                       " the SR). BOSS will take care of the"+
                                       " rest"

      report_event :msg => 'New promotion request pending review.'
      do_notify_review

      # This blocks until the request state is changed. Helper process that
      # triggers the request_notice participant on SRCSRV_REQUEST_STATECHANGE
      # is needed
      listen :to => 'req_changed_${ev.id}', :upon => 'reply',
             :where => '"${ev.state}" in ["new", "declined", "revoked", "accepted"]'

      # if reviewer declines or revokes this request we don't want to continue
      # declined also happens in case the review was rejected because of hardcoded OBS workflow
      _if :test => '${ev.state} == declined or ${ev.state} == revoked' do
        sequence do
          report_event :msg => '${f:reviewer} rejected the review and the request. Process finished'
          do_notify_reject
          # It is safe to terminate here as we're not holding a lock
          terminate
        end
      end

      # if reviewer short circuits and accepts this request we don't want to continue
      _if :test => '${ev.state} == accepted' do
        sequence do
          report_event :msg => '${f:reviewer} accepted the request. Process finished.'
          do_notify_accept
          # It is safe to terminate here as we're not holding a lock
          terminate
        end
      end

      # if reviewer approves the review it goes back to new state
      _if :test => '${ev.state} == new' do
        sequence do
          report_event :msg => '${f:reviewer} approved the review'
        end
      end

    end
  end

  ################################################################
  # This is the QA subprocess; It creates a kickstart file, calls 
  # IMG and then submits the image to OTS.

  define 'do_build_image' do
    change_request_state :if => 'auto_review in ${stages}', 
                         :action => 'add review', 
                         :comment => "Image build trial under progress using ${f:build_trial.project}"

    report_event :msg => 'Check image'
    cursor :break_if => '${__result__} != true' do
      # TODO: adapt to new get_provides/update_patterns combo
      #report_event :msg => 'Updating patterns in trial project'
      #update_patterns :project => '${build_trial.project}',
      #                :groups_package => '${build_trial.groups_package}',
      #                :if => '"${build_trial.groups_package}" != ""'
      # defineimage :image_type => 'testing'
      report_event :msg => 'Prepare a ks'
      build_ks
      request_image
      report_event :msg => 'Build image'
      build_image :debug_dump => 'true'
    end
    _if :test => '${__result__} != true' do
      sequence do
        set 'f:status' => 'FAILED'
        report_event :msg => 'Image build failed'
      end
      # _else
      sequence do
          change_request_state :if => 'auto_review in ${stages}',
                               :action => 'accept review',
                               :comment => "Image build trial successfully completed."
      end
    end
    report_event :msg => 'Check image done'
  end


  define 'do_test_image' do
    sequence do

      change_request_state :if => 'auto_review in ${stages}',
                           :action => 'add review',
                           :comment => "Image test under progress"
      test_image
      _if :test => '${__result__} != true' do
        sequence do
          set 'f:status' => 'FAILED'
          report_event :msg => 'Image test failed'
        end
        # _else
        sequence do
          change_request_state :if => 'auto_review in ${stages}',
                               :action => 'accept review',
                               :comment => "Image test passed."
        end
      end

    end
  end

  ################################################################
  # Any error causes the request to be rejected and the submitter
  # notified

  define 'do_reject' do
    sequence do

      report_event :msg => 'Rejecting'
      change_request_state :if => 'reject in ${stages}', :action => 'reject'
      set 'status' => 'FAILED'
      do_notify_reject

    end
  end

  define 'do_notify_reject' do
    sequence do

      # Get the request as it stands at the moment.
      get_request :req_id => "${ev.id}", :field => "req"
      get_userdata :user => "${req.state.who}", :field => "author"
      get_notify_recipients_obs :role => 'submitter'
      notify :template => '${template.reject}', :mail_to => "$f:emails",
             :subject => '[${pname}] SR#${ev.id} Rejected promotion request'

      notify_irc :if => '"${irc.req_channel}" != ""',
                 :irc_channel => '${irc.req_channel}',
                 :msg => '${irc.highlight} SR#${ev.id} Rejected promotion request'
    end
  end

  ################################################################
  # As packages move into Trunk, their bug & feature status need
  # updating and the reporting system is notified of progress.  The
  # final update steps are to accept the request and notify the user

  define 'do_accept' do
    sequence do

      do_report :if => 'report in ${stages}'
      report_event :msg => 'Accepting'
      change_request_state :if => 'accept in ${stages}', :action => 'accept'
      do_notify_accept

    end
  end

  define 'do_notify_accept' do
    sequence do

      get_request :req_id => "${ev.id}", :field => "req"
      get_userdata :user => "${req.state.who}", :field => "author"
      get_notify_recipients_obs :role => 'submitter'
      get_notify_recipients_obs :role => 'target project maintainers', :cc => 't'
      notify :template => '${template.accept}', :mail_to => "$f:emails",
             :subject => '[${pname}] SR#${ev.id} Accepted promotion request'

      notify_irc :if => '"${irc.req_channel}" != ""',
                 :irc_channel => '${irc.req_channel}',
                 :msg => '${irc.highlight} SR#${ev.id} Accepted promotion request'
    end
  end

  define 'do_report' do
    sequence do

      # Now for each package promoted, 
      iterator :on_field => 'ev.actions', :to_field => 'action' do
        sequence do
          set 'f:package' => '${action.sourcepackage}'
          #report_event :msg => 'Doing updates for ${package} after success'
          #getchangelog
          #bz
          feed_revs :if => 'revs in ${stages}'
        end
      end

      # Allow REVS to process the image
      _if :test => 'build_image in ${stages}' do
        revs_image :if => 'revs in ${stages}'
      end

    end
  end


  ################################################################
  # This utility subprocess wraps a group of actions inside other
  # process steps; in this case reserving the use of a build project

  define 'with_OBS_ticket' do
    sequence do
      report_event :msg => 'Waiting for trial area to be free'
      obsticket :action => 'get', :lock_project => '${project}'
      report_event :msg => 'Got trial area (locked)'
      apply
      report_event :msg => 'Unlocking trial area'
      obsticket :action => 'release', :lock_project => '${project}'
    end
  end

  define 'report_event' do
    sequence do
      echo 'process ${wfid}: SR#${ev.id} ${v:msg}'
      notify_irc :if => '"${irc.log_channel}" != ""',
                 :msg => 'process ${wfid} SR#${ev.id} ${v:msg}',
                 :irc_channel => '${irc.log_channel}'
    end
  end

  define 'do_revert_trial_subprocess' do
    sequence do

      _if :test => '"${f:build_trial.create}" != ""' do
        sequence do

          _if :test => '${f:status} != SUCCESS and "${f:build_trial.remove_on_fail}" != ""' do

            sequence :forget => true, :tag => 'remove_build_trial_thread' do

              report_event :msg => 'will wait ${build_trial.keep_failed_for} then remove trial area'
              wait '${build_trial.keep_failed_for}'
              report_event :msg => 'waited ${build_trial.keep_failed_for}; removing trial area'
              remove_build_trial

            end 
          end

          _if :test => '${f:status} == SUCCESS and "${f:build_trial.remove_on_success}" != ""' do
            sequence do
              report_event :msg => 'Removing trial area'
              remove_build_trial
            end
          end

        end
        # _else
        sequence do

          _if :test => '${f:status} != SUCCESS' do
            sequence do
              report_event :msg => 'Reverting build trial'
              do_revert_trial :build_in => '${build_trial.project}', :linked => 'True'
            end
          end

        end
      end

    end
  end

  define 'do_prechecks' do
    sequence do

      # First mark the request under review by adding one
      change_request_state :if => 'auto_review in ${stages}',
                           :action => 'add review',
                           :comment => "Under automated review"

      report_event :msg => 'Running checks'

      iterator :on_field => 'ev.actions', :to => 'v:action' do
        sequence do
          set '${v:sourceprojects}' => []
          _if :test => '${v:action.type} == "submit"' do
            sequence do
              _if :test => '${v:action.sourceproject} not in ${v:sourceprojects}' do
                do_wait_for_build :wait_for => '${v:action.sourceproject}'
              end
              inc '${v:sourceprojects}', :val => '${v:action.sourceproject}'
            end
          end
        end
      end

      # Run the enabled list of checks
      iterator :on_field => 'prechecks', :to => 'v:check' do
        sequence do
          _break :if => '"${v:check}" == ""'  # deal with the sentinel value
          report_event :msg => 'running ${v:check}'
          _if :test => '${v:check} == check_valid_changes' do
            check_valid_changes :using => 'relevant_changelog'
            #_else
            ref '${v:check}'
          end
          _if :test => '${__result__} != true' do set 'status' => 'FAIL' end
        end
      end

      report_event :msg => 'Prechecks done'

      # If the status has canged from SUCCESS then something failed
      _if :test => '${status} != SUCCESS' do
        sequence do
          # close the review
          change_request_state :if => 'auto_review in ${stages}',
                               :action => 'accept review',
                               :comment => "Prechecks completed; there were some failures."
          # reject the request
          do_reject
	      report_event :msg => 'Process finished'
          # It is safe to terminate here as we're not holding a lock
          terminate
        end
      end
      
      # close the prechecks review
      change_request_state :if => 'auto_review in ${stages}',
                           :action => 'accept review',
                           :comment => "Prechecks completed; none failed."
    end
  end

  define 'do_wait_for_build' do
    sequence do
      repeat :timeout => '2h', :on_timeout => 'error' do
        is_repo_published :project => '${v:wait_for}'
        _break :if => '${f:__result__}'
        report_event :msg => 'Waiting for ${v:wait_for} to build '+
                             '(${obsurl}project/monitor?project=${v:wait_for})'
        wait '1m'
      end
    end
  end

  define 'do_build_trial_subprocess' do
    sequence do

      # Now create a per-SR trial_project if configured to do so
      # if the conf didn't initialize the project name under will be an empty
      # string and the participant will fallback to the same default behavior as
      # the next statement
      setup_build_trial :if => '"${f:build_trial.create}" != ""', :under => '${f:build_trial.project}'
      # or use a precreated one, by default project:Trial
      set "f:build_trial.project" => "${f:project}:Trial", :if => '"${f:build_trial.project" == ""}'

      change_request_state :if => 'auto_review in ${stages}',
                           :action => 'add review',
                           :comment => "Build trial in progress at ${obsurl}project/monitor?project=${build_trial.project}"

      report_event :msg => 'Start trial build : ${build_trial.project}'
      do_build_trial :build_in => '${build_trial.project}', :linked => 'True'

      # wait for scheduler to catch up
      wait '1m'

      # This now waits for a build to finish
      do_wait_for_build :wait_for => '${build_trial.project}'

      do_wait_for_build :wait_for => '${project}'

      report_event :msg => 'Build done : ${build_trial.project}'
      get_build_trial_results :build_in => '${build_trial.project}'

      _if :test => '${f:__result__} == false' do
        sequence do
          report_event :msg => 'Trial build failures : ${new_failures}'
          change_request_state :if => 'auto_review in ${stages}',
                               :action => 'accept review',
                               :comment => "Build trial completed; there were some new failures."
          set 'status' => 'FAILED'
        end
        # _else
        sequence do
          report_event :msg => 'Trial build succeeded'
          change_request_state :if => 'auto_review in ${stages}',
                               :action => 'accept review',
                               :comment => "Build trial completed; nothing failed."
        end
      end

    end
  end

end
