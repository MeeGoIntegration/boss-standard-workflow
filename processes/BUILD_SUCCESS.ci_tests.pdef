# This process is part of BOSS
#
# It should be linked to projects where BOSS should keep the package
# group patterns up to date.

Ruote.process_definition 'BOSS_ci_tests' do
  sequence do
    set 'debug_trace' => 'True'
    set 'debug_dump' => 'True'

    # Terminate if trigger was for a repo we don't want to run tests for
    terminate :unless => '"${ev.repository}" == "${qa.repo}"'

    set "ev.id" => "${ev.package}_ci"
    do_log :msg => 'Starting CI tests process for ${ev.project} ${ev.repository} ${ev.package}'

    # Wait for the repository to get published so we get correct binaries
    repeat :timeout => '2h', :on_timeout => 'error' do
      wait '1m'
      is_repo_published :project => '${ev.project}',
	                :repository => '${ev.repository}',
			:arch => '${ev.arch}'
      _break :if => '${f:__result__}'
    end

    do_log :msg => 'Repository ${ev.project} ${ev.repository} published'

    select_test_packages :using => 'name',
                         :project => '${ev.project}',
                         :repository => '${ev.repository}',
                         :package => '${ev.package}'

    do_log :msg => 'Selected test packages ${qa.selected_test_packages}'

    # Terminate if no test packages were selected
    terminate :unless => '${qa.selected_test_packages}'

    cursor :break_if => '${f:__result__} != true' do
  
      # Get kickstart
      build_ks
  
      # Register image
      request_image
  
      do_log :msg => 'Building VM image'
      # Build image
      build_image

      update_image_status :status => 'DONE, TESTING'
      set "testing" => "yes"

      do_log :msg => 'Testing VM image'
      # Test image
      test_vm_image

    end


    _if :test => '${f:testing} == yes' do
      sequence do

        update_image_status :status => 'DONE, TESTED'
        qareports
        notify_irc :irc_channel => '${irc.req_channel}',
                   :msg => '${irc.highlight} CI test run for ${ev.project} ${ev.repository} ${ev.package} results at ${qa.results.report_url}'  

      end
      #_else
      sequence do
        notify_irc :irc_channel => '${irc.req_channel}',
                   :msg => '${irc.highlight} Image build ${image.image_id} for ${ev.project} ${ev.repository} ${ev.package} failed.'  
      end
    end

  end

  define 'do_log' do
    sequence do
      echo 'process ${wfid}: ${ev.id} ${v:msg}'
      notify_irc :msg => 'process ${wfid} ${ev.id} ${v:msg}',
                 :irc_channel => '${irc.log_channel}'
    end
  end

end
