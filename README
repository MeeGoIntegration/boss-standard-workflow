BOSS Request Handling

Objective: A user issues SR to the 'target' project; typically
Trunk. BOSS then evaluates the SR and either actions the SR or
recommends action.

Linking the SRCSRV_REQUEST_CREATE event in a particular project allows
BOSS to handle the SR.

BOSS then carries out a series of steps (only if each previous step succeeds)

* validates the request by running process, policy, and pre-build tests
* waits to get a lock on the target project
* creates a <link> project called boss:${project}:testing:$SR for testing/simulation
* enables BOSS monitoring on the boss:*:testing:$SR project
* copies package mentioned in the SR to the testing project
* waits for build in boss:*:testing:$SR to complete
* creates ks
* builds image from boss:*:testing:$SR
* sends image to OTS
* accepts SR (optionally notifies RE team to accept SR)
* releases lock on the target project
* removes boss:*:testing:$SR project

Setup

Link SRCSRV_REQUEST_CREATE -> BOSS_handle_SR in any project to be handled by BOSS

The robogrator_monitor_build_project participant should link the
trial_build_monitor process to the correct events in the build trial
project.

Dependencies:
robogrator
* standard_workflow
* configure_standard_process
* built_notice?
* robogrator_monitor_build_project

obsticket
* obsticket

notify_irc
* notify_irc
notify
* notify
prechecks
* check_process
* check_quality
* check_policy

resolverequest
* prepare_trial_build
* start_trial_build
* change_request_state

IMG
* defineimage
* build_ks
* build_image

OTS
* test_image

??
* getchangelog
* bz
* revs_update


Tasks:

Create BOSS: project with correct user

    <project name="BOSS">  
      <title>BOSS Testing area</title>  
      <description>Projects created in this area allow BOSS to evaluate SRs</description>  
      <person role="maintainer" userid="boss"/>  
      <person role="bugowner" userid="boss"/>  
    </project>


Enable project:

 project=Chalk:Trunk
 ppath=${project//:/\/}
 mkdir -p /srv/BOSS/processes/${ppath}
 ln -s /srv/BOSS/processes/BOSS_handle_SR /srv/BOSS/processes/${ppath}/SRCSRV_REQUEST_CREATE


task robogrator_monitor_build_project

 project=Chalk:Trunk
 ppath=${project//:/\/}
 mkdir -p /srv/BOSS/processes/boss/${project//:/\/}/testing
 for ev in REPO_PUBLISHED BUILD_UNCHANGED BUILD_FAIL; do
   ln -s /srv/BOSS/processes/trial_build_monitor /srv/BOSS/processes/boss/${project//:/\/}/testing/$ev
 done



task: an SR accept or revoke should cancel any in-progress build trials.

built_notice

skynet make_participant -n built_notice -p /srv/BOSS/participants/built_notice
skynet enable built_notice
skynet register -n built_.\* -q built_notice


task: document use of return values and fields in standard workflow


robogrator 
* standard_workflow 
* configure_standard_process (copied 
* built_notice (copied to R)
* robogrator_monitor_build_project

obsticket
* obsticket

notify_irc
* notify_irc
notify
* notify
prechecks
* check_process
* check_quality
* check_policy

resolverequest
* prepare_trial_build
* start_trial_build
* change_request_state

IMG
* defineimage
* build_ks
* build_image

OTS
* test_image

??
* getchangelog
* bz
* revs_update
