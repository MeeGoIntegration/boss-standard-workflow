import unittest
from ConfigParser import ConfigParser

from mock import Mock

from common_test_lib import BaseTestParticipantHandler, WI_TEMPLATE

from RuoteAMQP import Workitem

TEST_SPEC = u"""
# Generated by: spectacle
Name: boss
Version: 0.6.1
Release:1%{?dist}
Summary: MeeGo Build Orchestration Server System
Group: Productivity/Networking/Web/Utilities
License: GPL2
URL: http://wiki.meego.com/BOSS
Source0: boss_%{version}.orig.tar.gz
BuildRoot: %{name}-root-%(%{__id_u} -n)

%description
This description has some unicode: \xe1\xe1\xe1
""".encode('utf-8')

class TestParticipantHandler(BaseTestParticipantHandler):

    module_under_test = "check_yaml_matches_spec"

    def test_handle_wi_control(self):
        self.participant.handle_wi_control(None)

    def test_handle_lifecycle_control(self):
        ctrl = Mock()
        ctrl.message = "start"
        ctrl.config = ConfigParser()
        self.assertRaises(RuntimeError,
                self.participant.handle_lifecycle_control, ctrl)
        ctrl.config.add_section("obs")
        ctrl.config.set("obs", "oscrc", "oscrc_file")
        self.participant.handle_lifecycle_control(ctrl)
        ctrl.config.add_section("check_yaml")
        ctrl.config.set("check_yaml", "spec_pattern", "test")
        self.participant.handle_lifecycle_control(ctrl)

    def test_setup_obs(self):
        self.participant.setup_obs("test_namespace")

    def mock_specify(self, cmd, *args, **kwargs):
        filename = cmd[-1]
        self.assertTrue(filename.endswith(".yaml"))  # sanity check
        specfile = filename[:-5] + ".spec"
        with open(specfile, "w") as specf:
            specf.write(self.specify_out)
        proc = Mock()
        proc.wait.return_value = 0
        return proc

    def configure_participant(self):
        ctrl = Mock()
        ctrl.message = "start"
        ctrl.config = ConfigParser()
        ctrl.config.add_section("obs")
        ctrl.config.set("obs", "oscrc", "oscrc_file")
        self.participant.handle_lifecycle_control(ctrl)

        self.mut.subprocess = Mock()
        self.mut.subprocess.Popen.side_effect = self.mock_specify

        self.participant.obs.getFile.return_value = TEST_SPEC
        self.specify_out = TEST_SPEC

        self.wid = Workitem(WI_TEMPLATE)
        self.wid.fields.msg = None
        fake_action = {
            "type": "submit",
            "sourceproject": "fake",
            "sourcepackage": "fake",
            "sourcerevision": "fake"
        }
        self.wid.fields.ev.actions = [fake_action, {"type": "test"}]
        self.wid.fields.ev.namespace = "test"

    def test_handle_wi(self):
        self.configure_participant()
        self.participant.handle_wi(self.wid)
        self.assertTrue(self.wid.result)

    def test_handle_wi_no_actions(self):
        self.configure_participant()
        self.wid.fields.ev.actions = None
        self.assertRaises(RuntimeError, self.participant.handle_wi, self.wid)

    def test_handle_wi_no_namespace(self):
        self.configure_participant()
        self.wid.fields.ev.namespace = None
        self.assertRaises(RuntimeError, self.participant.handle_wi, self.wid)

    def test_handle_wi_fuzzy(self):
        self.configure_participant()
        self.specify_out = TEST_SPEC + "# specify added a comment.\n"
        self.participant.handle_wi(self.wid)
        self.assertTrue(self.wid.result)

    def test_handle_wi_bad_spec(self):
        self.configure_participant()
        self.specify_out = "Specify mangled the specfile completely.\n"
        self.participant.handle_wi(self.wid)
        self.assertFalse(self.wid.result)

    def test_handle_wi_missing_yaml(self):
        self.configure_participant()
        self.participant.obs.getPackageFileList.return_value.remove('fake.yaml')
        self.participant.handle_wi(self.wid)
        self.assertFalse(self.wid.result)

    def test_handle_wi_no_specify(self):
        self.configure_participant()
        self.participant.obs.getFile.return_value = \
            TEST_SPEC.replace('spectacle', 'something')
        # Make sure the participant doesn't call specify in this case
        self.specify_out = "Specify would have mangled the specfile.\n"
        self.participant.handle_wi(self.wid)
        self.assertTrue(self.wid.result)

if __name__ == '__main__':
    unittest.main()
